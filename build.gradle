/*
 * Описывает как проект собирать.
 */

plugins {
    // Support Idea IDE
    id 'idea'

    // Аналог Maven Dependency Management
    id "io.spring.dependency-management" version "1.0.9.RELEASE"

    // Build uber-jar
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
}

idea {
    project {
        languageLevel = 11
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

allprojects {
    group "ru.advancedtraining"
    version "1.0.0"

    repositories {
        mavenCentral()
    }

    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        dependencies {
            imports {
                mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE")
            }
            dependency("com.google.guava:guava:${Versions.guava}")

            // Kafka
            dependency("org.apache.kafka:kafka-clients:${Versions.kafka}")

            // Logging
            dependency("org.apache.logging.log4j:log4j-api:${Versions.log4j}")
            dependency("org.apache.logging.log4j:log4j-core:${Versions.log4j}")
            dependency("org.apache.logging.log4j:log4j-slf4j-impl:${Versions.log4j}")

            // Jackson
            dependency("com.fasterxml.jackson.core:jackson-databind:${Versions.jackson_databind}")
            dependency("org.glassfish:javax.json:${Versions.glassfishJson}")
            dependency("com.google.protobuf:protobuf-java-util:${Versions.protobuf}")
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }

        resolutionStrategy {
            force("javax.servlet:servlet-api:2.4")
            force("commons-logging:commons-logging:1.1.1")
            force("commons-lang:commons-lang:2.5")
            force("org.codehaus.jackson:jackson-core-asl:1.8.8")
            force("org.codehaus.jackson:jackson-mapper-asl:1.8.3")
            force("org.codehaus.jettison:jettison:1.1")
            force("org.javassist:javassist:3.24.0-GA")
        }
    }
}

// Print versions from BOM
task managedVersions {
    doLast {
        dependencyManagement.managedVersions.each {
            println it
        }
    }
}

// Gradle -q hello
task hello {
    println 'Hello Task!'
    println System.getenv('JAVA_HOME')
}